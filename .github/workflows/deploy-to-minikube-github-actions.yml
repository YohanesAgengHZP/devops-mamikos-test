name: deploy vue app into minikube cluster

on:
  # Triggers the workflow on push or pull request events but only for the "dev" branch
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Step 1: Checkout code
  checkout:
    runs-on: self-hosted
    name: Checkout Code
    steps:
    - uses: actions/checkout@v2

  check_for_changes:
    runs-on: self-hosted
    name: Check for Changes in Dockerfile or Source Code
    needs: checkout
    outputs:
      changes_detected: ${{ steps.check.outputs.changes_detected }}
    steps:
      - name: Calculate Checksum
        id: check
        run: |
          FILES="Dockerfile src/"  # Add relevant files or folders to watch for changes
          checksum=$(tar -cf - $FILES | md5sum | awk '{ print $1 }')
          echo "Checksum: $checksum"
          echo "::set-output name=changes_detected::false"

          # Check for changes
          if [[ -f checksum.txt ]]; then
            old_checksum=$(cat checksum.txt)
            if [[ "$checksum" != "$old_checksum" ]]; then
              echo "::set-output name=changes_detected::true"
            fi
          else
            echo "::set-output name=changes_detected::true"
          fi

          # Save new checksum for future comparisons
          echo "$checksum" > checksum.txt
  

  # Step 2: Build and push Docker image to GHCR
  build_and_push:
    runs-on: self-hosted
    name: Build and Push Docker Image
    needs: [checkout, check_for_changes]
    if: needs.check_for_changes.outputs.changes_detected == 'true'
    env:
      DOCKERFILE_PATH: ${{ vars.DOCKERFILE_PATH }}
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}
      IMAGE_TAG: ${{ vars.IMAGE_TAG }}
      BASE_PATH: ${{ vars.BASE_PATH }}
    steps:
      - name: Pull Latest Code
        run: |
          cd $BASE_PATH
          git pull origin $DEV_BRANCH
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.REGISTRY_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build and Push Image to GHCR
        run: |
          docker build -f $DOCKERFILE_PATH -t $IMAGE_NAME:$IMAGE_TAG $BASE_PATH
          docker push $IMAGE_NAME:$IMAGE_TAG

  # Step 3: apply deployment
  Deploy:
    runs-on: self-hosted
    needs: build_and_push
    steps:
      - name: Deploy to Minikube
        run: |
          kubectl apply -f $DEPLOYMENT_FILE_PATH 
          kubectl apply -f $HPA_FILE_PATH
        env:
          DEPLOYMENT_FILE_PATH: ${{ vars.DEPLOYMENT_PATH }}
          HPA_FILE_PATH: ${{ vars.HPA_FILE_PATH }}

  # Step 4: Test service URLs
  Test_services:
    runs-on: self-hosted
    name: Test Service URLs
    needs: Deploy
    steps:
    - name: Test Service URLs
      run: |
          minikube service list
          minikube service vuejs-app -n mamikos-devops --url

  # Step 5: Clean from unused docker components (images, containers)
  Cleanup:
    runs-on: self-hosted
    needs: Test_services
    steps:
    - name: Cleanup Docker
      run: |
        echo "Removing stopped containers..."
        docker container prune -f
        
        echo "Removing dangling images..."
        docker image prune -f
        
        echo "Removing unused images..."
        docker image prune -a -f
        
        echo "Cleanup completed."
